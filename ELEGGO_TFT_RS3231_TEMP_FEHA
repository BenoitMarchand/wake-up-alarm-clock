/*Reloj DS3231 elegoo tft ( mes y día de la semana, más temperatura)
PLACA MEGA Y ESCUDO.*/

/* MEDICION DE TIEMPO CON RTC_DS3231
  en el pin 20 -21 y alimentación 5 Volt y GND
  pines en el extremo de la regleta y pines SDA Y SCL
  20 Y 21
  RAMON
*/
///////////////BIBLIOTECAS//////////////
#include <Elegoo_TFTLCD.h>
#include <pin_magic.h>
#include <registers.h>
#include <Elegoo_GFX.h>    // Core graphics library

#include <Wire.h>   // incluye libreria para interfaz I2C
#include <RTClib.h>   // incluye libreria para el manejo del modulo RTC
RTC_DS3231 rtc;     // crea objeto del tipo rtc DS3231

#define DS3231_I2C_ADDRESS 0x68 //DIRECCION DE NUESTRO RELOJ

String diasemana[7] = { "Domingo", "Lunes", "Martes", "Miercoles", "Jueves", "Viernes", "Sabado" }; //observar que empiezan por el ultimo
String mes[12] = {"Diciembre", "Enero", "Febrero", "Marzo", "Abril", "Mayo",  "Junio", "Julio", "Agosto", "Septiembre", "Octubre", "Noviembre",  };

//-----------------PINES LCD ESCUDO-----------------------------
#define LCD_CS A3 // Chip Select goes to Analog 3
#define LCD_CD A2 // Command/Data goes to Analog 2
#define LCD_WR A1 // LCD Write goes to Analog 1
#define LCD_RD A0 // LCD Read goes to Analog 0
#define LCD_RESET A4 // Can alternately just connect to Arduino's reset pin

// COLORES Assign human-readable names to some common 16-bit color values:
#define	BLACK   0x0000
#define	BLUE    0x001F
#define	RED     0xF800
#define	GREEN   0x07E0
#define CYAN    0x07FF
#define MAGENTA 0xF81F
#define YELLOW  0xFFE0
#define WHITE   0xFFFF

Elegoo_TFTLCD tft(LCD_CS, LCD_CD, LCD_WR, LCD_RD, LCD_RESET);

void setup(void) {
  Serial.begin(9600);    // inicializa comunicacion serie a 9600 bps

  //////////////////////////DETECCIÓN DEL RTC3231
  if (!rtc.begin()) {       // si falla la inicializacion del modulo
    Serial.println("Modulo RTC no encontrado !");  // muestra mensaje de error
    while (1);         // bucle infinito que detiene ejecucion del programa
  }

  ///////////////////////////DETECCIÓN DEL DRIVER LCD////////////////
#ifdef USE_Elegoo_SHIELD_PINOUT
  Serial.println(F("Using Elegoo 2.4\" TFT Arduino Shield Pinout"));
#else
  Serial.println(F("Using Elegoo 2.4\" TFT Breakout Board Pinout"));
#endif
  Serial.print("TFT size is "); Serial.print(tft.width()); Serial.print("x"); Serial.println(tft.height());
  tft.reset();
  uint16_t identifier = tft.readID();
  if (identifier == 0x9325) {
    Serial.println(F("Found ILI9325 LCD driver"));
  } else if (identifier == 0x9328) {
    Serial.println(F("Found ILI9328 LCD driver"));
  } else if (identifier == 0x4535) {
    Serial.println(F("Found LGDP4535 LCD driver"));
  } else if (identifier == 0x7575) {
    Serial.println(F("Found HX8347G LCD driver"));
  } else if (identifier == 0x9341) {
    Serial.println(F("Found ILI9341 LCD driver"));
  } else if (identifier == 0x8357) {
    Serial.println(F("Found HX8357D LCD driver"));
  } else if (identifier == 0x0101)
  {
    identifier = 0x9341;
    Serial.println(F("Found 0x9341 LCD driver"));
  }
  else if (identifier == 0x1111)
  {
    identifier = 0x9328;
    Serial.println(F("Found 0x9328 LCD driver"));
  }
  else {
    Serial.print(F("Unknown LCD driver chip: "));
    Serial.println(identifier, HEX);
    Serial.println(F("If using the Elegoo 2.8\" TFT Arduino shield, the line:"));
    Serial.println(F("  #define USE_Elegoo_SHIELD_PINOUT"));
    Serial.println(F("should appear in the library header (Elegoo_TFT.h)."));
    Serial.println(F("If using the breakout board, it should NOT be #defined!"));
    Serial.println(F("Also if using the breakout, double-check that all wiring"));
    Serial.println(F("matches the tutorial."));
    identifier = 0x9328;
  }
  ///////////////////////////////INICIO DRIVER LCD////////////////////////////////
  tft.begin(identifier);
}
/////////////////////////// FUNCION printDate() //////////////////////////////////
void printDate(DateTime date)
{
  tft.setCursor(80, 30);
  tft.setTextColor(GREEN);
  tft.setTextSize(4);
  tft.print(mes[date.month()]); 
//---------------------------------------------
  tft.setCursor(80, 70);
  tft.setTextColor(WHITE);
  tft.setTextSize(3);
  tft.print(diasemana[date.dayOfTheWeek()]);   //función en la libreria RTC-> date.dayOfTheWeek()
//----------------------------------------------
  tft.setTextColor(RED);
  tft.setTextSize(3);
  tft.setCursor(90, 110);
  tft.print(date.day(), DEC);
  tft.print('/');
  tft.print(date.month(), DEC);
  tft.print('/');
  tft.print(date.year(), DEC);

  tft.setCursor(60, 160);
  tft.setTextColor(MAGENTA);
  tft.setTextSize(3);
  tft.print("HORA:");
  tft.print(date.hour(), DEC);
  tft.print(':');
  tft.print(date.minute(), DEC);
  tft.print(':');
  tft.print(date.second(), DEC);
  tft.println();
}

void loop(void) {

  ///////////////////////////////INICIO RTC3231///////////////////////////////
  DateTime now = rtc.now();      // funcion que devuelve fecha y horario en formato
  // DateTime y asigna a variable fecha

  ///////////////////////////////////////ESCRITURA EN LCD/////////////////////
  uint8_t rotation = 3;
  tft.setRotation(rotation);
  tft.fillScreen(BLACK);

  printDate(now); //Llamada a la funcion

  //////////////////////////////LECTURA TEMPERATURA//////////////////////////
  byte buffer[2];   // Leemos los registros de temperatura
  Wire.beginTransmission(DS3231_I2C_ADDRESS);
  Wire.write(0x11); // La direccion de los registros de temperatura
  Wire.endTransmission();

  Wire.requestFrom(DS3231_I2C_ADDRESS, 2); // Leemos 2 registros que son los unicos de temperatura
  buffer[0] = Wire.read(); // Leemos de a un byte a la vez
  buffer[1] = Wire.read();

  if (buffer[0] < 0xFF) {   // Para evitar una falsa lectura que usualmente viene en 0xFF = -127C lo que es imposible
    tft.setCursor(50, 200); // Mostramos la temperatura con DS3231 por el TFT
    tft.setTextColor(YELLOW);
    tft.setTextSize(3);
    tft.println(String("Temp: ") + buffer[0] + "." + (buffer[1] / 64 * 25) + " C");
  }
  delay(1000); // Leeremos la temperatura,fecha y hora cada 1 segundo
}
